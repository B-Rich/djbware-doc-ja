<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
<head>
<title>multilog(8) - daemontools</title>
</head>
<body>
<h1><code class="command">multilog</code>(8) - daemontools</h1>
<h2><a id="name">名前</a></h2>
<p>
<code class="command">multilog</code>
-
標準入力から行を読み込み、
パターンに一致する行を任意の数のログファイルに記録します。
<!--
標準入力に送られてくる行を次々と読み込み、
指定されたパターンに一致する行を任意の数のログファイルに記録します。
-->
</p>

<h2><a id="syntax">書式</a></h2>
<div class="syntax">
<code class="commandline">multilog <var>script</var></code>
</div>

<h2><a id="description">解説</a></h2>
<p>
<code><var>script</var></code>
は複数の引数をとり、
各引数で 1つの<a href="#action">動作 (action)</a> を指定します。
一連の動作指定は入力の各行ごとに実行されます。
動作の指定にはシェルのメタ文字が含まれることがあるため、
<code class="command">multilog</code>
をシェルから起動する場合は、
メタ文字をクォートするかエスケープしなければなりません。
</p>
<p>
指定できる動作は次のような種類があります。
</p>
<ul>
    <li><a href="#action-select-line">入力行の取捨選択</a></li>
    <li><a href="#action-timestamp">日時の追加</a></li>
    <li><a href="#action-alert">標準エラー出力への出力</a></li>
    <li><a href="#action-status-file">状態ファイルの書き換え</a></li>
    <li><a href="#action-log-file">ログファイルへの出力</a></li>
</ul>
<p>
無効な動作指定は単に無視されます。
特にエラーメッセージなどは表示しません。
<!-- ↑存在しないもの、「t」を最初に指定しなかった場合などが該当 -->
</p>
<p>
<code class="command">multilog</code>
は、標準入力が終わりまで達すると、0 を返して終了します。
標準入力の最後の行に改行が含まれていない場合、
<code class="command">multilog</code>
は改行を付加します。
</p>
<p>
<code class="command">multilog</code>
は、
メモリの確保に失敗したときや、
ほかの
<code class="command">multilog</code>
プロセスが同じログファイルに書きこんでいるときは、
メッセージを標準エラー出力に出力し、
111 を返して終了します。
その際、標準入力はまったく読み込みません。
</p>
<p>
標準入力の読み込みを開始した後、ディスクへの書き込みで問題が発生すると、
<code class="command">multilog</code>
はメッセージを標準エラー出力に出力し、
一定時間活動を停止 (5秒間) し、ディスクへの書き込みを再試行します。
その際、入力データを捨てることはありません。
しかし、
<code class="command">multilog</code>
へ入力を与えているプログラムが停止してしまう可能性があります。
</p>
<p>
<code class="command">multilog</code>
は
<code class="signalname">TERM</code>
シグナルを受け取ると終了します。
標準入力から行を読み込んでいる途中の場合は、
次の改行までのデータを読み込んで処理してから終了します。
</p>

<h2><a id="action">動作 (action)</a></h2>
<h3><a id="action-select-line">入力行の取捨選択</a></h3>
<p>
この動作指定により、
入力の各行をほかの動作指定の対象とするかどうか、
パターンによって取捨選択することができます。
初期状態ではすべての入力行は選択されます。
</p>
<dl>
<dt><code class="option">-<var>pattern</var></code></dt>
    <dd><code><var>pattern</var></code> に一致する入力行を除外します。</dd>
<dt><code class="option">+<var>pattern</var></code></dt>
    <dd><code><var>pattern</var></code> に一致する入力行を選択します。</dd>
</dl>
<p>
<code><var>pattern</var></code>
は、アスタリスク「<code>*</code>」とそれ以外の文字から成る文字列です。
入力行は、その文字列が
<code><var>pattern</var></code>
の文字の並びに合致するかどうかによって取捨選択されます。<!-- FIXME: Fix translation -->
<code><var>pattern</var></code>
中のアスタリスク以外の文字は、そのまま同じ文字に一致します。
<code><var>pattern</var></code>
の末尾よりも前に含まれるアスタリスクは、
その次の文字を含まない文字列に一致します。
<code><var>pattern</var></code>
の末尾のアスタリスクは、
どんな文字列にも一致します。
</p>
<p>
メモリを節約するため、
<code class="command">multilog</code>
のパターン検査は、各入力行の最初の 1000 バイトだけに対して行なわれます。
</p>
<p>
以下に例を示します。
</p>
<dl>
<dt><code class="option">+hello</code></dt>
    <dd>
	「<code class="input">hello</code>」という行は選択されます。
	「<code class="input">hello world</code>」という行は選択されません。
    </dd>
<dt><code class="option">-named[*]: Cleaned cache *</code></dt>
    <dd>
	「<code class="input">named[135]: Cleaned cache of 3121 RRs</code>」
	という行は除外されます。
	パターン中の最初のアスタリスクは、
	右ブラケット「]」以外を含む文字列に一致します。
    </dd>
<dt><code class="option">-*</code></dt>
    <dd>すべての行を除外します。</dd>
</dl>
<h3><a id="action-timestamp">日時の追加</a></h3>
<dl>
<dt><code class="option">t</code></dt>
    <dd>
	アットマーク「@」、正確な日時 (timestamp)、そしてスペースを各行の先頭に追加します。
	日時は
	<a href="tai64n.8.xhtml"><code class="command">tai64n(8)</code></a>
	と同じ形式が用いられます。
	この動作指定は一番最初に指定しなければなりません (2番目以降の指定は無視される)。
    </dd>
</dl>
<p>
パターンによる入力行の取捨選択動作は、
日時が挿入された後に実行されます。
例えば、
</p>
<div class="sample">
<pre class="commandline"><code class="commandline">multilog t '-*' '+* fatal: *' ./main</code></pre>
</div>
<p>
と起動した場合に、次のような行が入力されたとします。
</p>
<div class="sample">
<pre class="input"><code class="input">fatal: out of memory
</code></pre>
</div>
<p>
すると、
</p>
<div class="sample">
<pre class="output"><code class="output">@400000003b4a39c23294b13c fatal: out of memory
</code></pre>
</div>
<p>
という行が記録されます。
行の選択動作「<code class="option">+* fatal: *</code>」
の最初のアスタリスクが日時に一致します。
</p>
<p>
この日時形式は、
<a href="tai64nlocal.8.xhtml"><code class="command">tai64nlocal(8)</code></a>
を利用すれば、
人が読み易い形式に変換することができます。
</p>


<h3><a id="action-alert">標準エラー出力への出力</a></h3>
<dl>
<dt><code class="option">e</code></dt>
    <dd>
	選択された入力行
	を標準エラー出力に出力します。
	行の長さが 200 バイトを越える場合、
	201 バイト以降は「<code>...</code>」に置き換えられて出力されます。
    </dd>
</dl>
<h3><a id="action-status-file">状態ファイルの書き換え</a></h3>
<dl>
<dt><code class="option">=<var>file</var></code></dt>
    <dd>
	ファイル
	<code class="filename"><var>file</var></code>
	の中身を選択された入力行
	(最長で行頭の 1000 バイト)
	で置き換えます。
	1001 バイトに満たない部分は改行文字で埋められ、
	ファイルのサイズは必ず 1001 バイトになります。
	<!-- FIXME: 次の文は省略
	    There is no protection of file against power outages.
	-->
    </dd>
</dl>
<p>
例えば、次のような動作指定で起動したとします。
</p>
<div class="sample">
<pre class="commandline"><code class="commandline">multilog '-*' '+STAT*' =log/status</code></pre>
</div>
<p>
これで、「<code class="input">STAT</code>」で始まる最新の入力行がファイル
<code class="filename">log/status</code>
に保持されます。
</p>
<h3><a id="action-log-file">ログファイルへの出力</a></h3>
<p>
ここで挙げる動作指定は、ログファイルへの出力に関するものです。
<code class="command">multilog</code>
のログファイルへの出力動作には、
次の機能が備わっています。
</p>
<ul>
    <li>ログファイルの自動ローテーション</li>
    <li>プログラムの自動起動 (ローテーションの実行時)</li>
</ul>
<p>
<code class="command">multilog</code>
の引数にディレクトリをドット「<code>.</code>」かスラッシュ「<code>/</code>」
で始まる名前で指定すると、それがファイルへの出力動作指定になります。
</p>
<dl>
<dt><code class="option"><var>dir</var></code></dt>
    <dd>
	選択された入力行をディレクトリ
	<code class="directoryname"><var>dir</var></code>
	内のファイルに追加記録します。
	ディレクトリが存在しなければ、
	<code class="command">multilog</code>
	が起動時に作成します。
    </dd>
    <dd>
	1つのログ用ディレクトリに対し、
	同時に複数の
	<code class="command">multilog</code>
	プロセスから書き込むようにしたり、
	1つのプロセスの複数の出力動作指定から書き込むようにはしないでください。
    </dd>
</dl>
<h4>ログ用ディレクトリの構成</h4>
<p>
ディレクトリ
<code class="directoryname"><var>dir</var></code>
には、
「<code class="filename">current</code>」という名前の現在のログファイル、
いくつかの古いログファイル、
そして
<code class="command">multilog</code>
が動作の経過や状態を保持するためのファイルがあります。
<!-- FIXME: state (!processor の fd 5 の出力を保存), lock は? -->
</p>
<p>
古いログファイルの名前は、
先頭にアットマーク「<code>@</code>」が付き、
続いてファイルへの書き込みが完了したときの日時、
そして最後には次のようなコードが付きます。
</p>
<dl>
<dt><code>.s</code></dt>
    <dd>
	完全にローテーション処理が完了し、
	無事にディスクに保存された状態。
    </dd>
<dt><code>.u</code></dt>
    <dd>
	<code class="command">multilog</code>
	プロセスが強制終了
	(例えば停電によるシステム停止)
	されたため、
	不完全な状態です。
	<code class="option">!<var>processor</var></code>
	動作 (後述) を指定していたなら、
	そのプログラムで処理されていない状態です。
	ログファイルへの書き込み途中だった場合は、
	データが欠落した可能性もあります。
    </dd>
</dl>
<p>
NFS、
非同期 (async) ファイルシステム、
ソフトアップデート (softupdates) ファイルシステムでは注意が必要です。
そのようなファイルシステム上で停電などによる不意なシステム停止が発生すると、
それ以前のディスクへの書き込みが無事では済まず、
ファイルが消失する可能性があります。
</p>
<p>
<code class="command">multilog</code>
の稼働中は、
<code class="filename">current</code>
ファイルのアクセス権は 644 に設定されます。
<code class="command">multilog</code>
が標準入力の読み込みを終え、
<code class="filename">current</code>
への書き込みを無事に完了すると、
<code class="filename">current</code>
のアクセス権を 744 に設定してから終了します。
次回起動したときには
<code class="filename">current</code>
は再びアクセス権 644 に戻され、
新たな行の書き込みが続けられます。
</p>
<p>
<code class="command">multilog</code>
は、
<code class="filename">current</code>
ファイルのサイズが一定のバイト数を越えると、
<code class="filename">current</code>
のディスクへの書き込みを完了させ、
アクセス権を 744 に設定し、
そして
<code class="filename">current</code>
を古いログファイルとして保存 (ファイル名を変更) します。
</p>
<h4>ローテーション処理の動作指定</h4>
<p>
以下の動作指定は、
次の
<code class="directoryname"><var>dir</var></code>
動作指定に対し、
ログファイルのローテーション処理に関する動作を指定します。
</p>

<dl>
<dt><code class="option">s<var>size</var></code></dt>
    <dd>
	ログファイルの最大サイズを指定します。
	ログファイル
	<code class="filename">current</code>
	のサイズが
	<var>size</var>
	バイト以上になると、
	<code class="command">multilog</code>
	はログファイルのローテーション処理を実行します
	(
	または、
	最後の行を書き込んだ段階で、
	<code class="filename">current</code>
	のサイズが
	<var>size</var> - 2000 バイト以上になった場合
	)。
	<var>size</var>
	の値は 4096 から 16777215 までの範囲でなければなりません。
	既定の最大ファイルサイズは 99999 バイトです。
    </dd>
    <dd>
	daemontools 0.75 以降では、
	<code class="command">multilog</code>
	は
	<code class="signalname">ALRM</code>
	シグナルを受け取ると、
	直ちにローテーション処理を開始します。
	ただし、
	<code class="filename">current</code>
	が空の場合は無視します。
    </dd>
    <!--
	FIXME: 1行の長さが size + 1 以上の場合、どうなるか?
	    → size バイトで行が分割される
	       (size - 現在の current のサイズで…)
    -->
<dt><code class="option">n<var>num</var></code></dt>
    <dd>
	ディレクトリに残しておくべきログファイル
	(<code class="filename">current</code> も含む)
	の数を指定します。
	ログファイルのローテーション処理において、
	<code class="command">multilog</code>
	は
	<code class="filename">current</code>
	ファイルの名前を変更した後、
	古いログファイルの数が
	<var>num</var>
	個以上あるなら、
	もっとも古い日時のログファイルを削除します。
	<var>num</var>
	の値は最低でも 2 でなければなりません。
	既定のログファイルの数は 10 です。
    </dd>
<dt><code class="option">!<var>processor</var></code></dt>
    <dd>
	ログファイルを処理するプログラムを指定します。
	ログファイルのローテーション処理において、
	<code class="command">multilog</code>
	は
	<code class="filename">current</code>
	ファイルを古いログファイルとしてそのまま保存
	(ファイル名を変更)
	する代わりに、
	<code class="filename">current</code>
	の内容を
	<code class="commandline"><var>processor</var></code>
	の標準入力に渡し、
	その出力を保存します。
	また
	<code class="command">multilog</code>
	は、
	<code class="commandline"><var>processor</var></code>
	が記述子 5 番に書き込んだ内容を
	<code class="filename">state</code>
	ファイルに保存したり、
	前回の
	<code class="filename">state</code>
	ファイルの内容を記述子 4 番から読み出せるようにしてから
	<code class="commandline"><var>processor</var></code>
	を起動します。
	<!-- processor は、/bin/sh の -c オプションを介して起動される -->
	<code class="command">multilog</code>
	へ入力を与えているプログラムは、
	<code class="commandline"><var>processor</var></code>
	の動作中に停止してしまう可能性があります。
	<!-- FIXME: 理由も書く? -->
    </dd>
    <dd>
	信頼性を保つため、
	<code class="commandline"><var>processor</var></code>
	は、
	出力の生成に際して何らかの問題が発生した場合、
	0 以外の値を返して終了しなければなりません。
	すると
	<code class="command">multilog</code>
	は、
	一定時間活動を停止 (5秒間) した後、
	<code class="commandline"><var>processor</var></code>
	を再実行します。
    </dd>
</dl>

</body>
</html>

